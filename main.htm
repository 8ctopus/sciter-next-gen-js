<html
    window-resizable="true"
    window-width="400dip"
    window-height="700dip"
>
<head>
<title>sciter next gen javascript</title>
<style>

@import url(node_modules/sciter-fontawesome/src/fontawesome.css);
@import url(node_modules/sciter-logger/src/logger.css);

body {
    flow: vertical;
}

</style>
<script type="module">

import Logger from "node_modules/sciter-logger/src/logger.js";
import Utils from "node_modules/sciter-utils/src/utils.js";

// default import
import bmiDefault from "./js/module.js";

// named imports
import {four} from "./js/module.js";
import {bmi} from "./js/module.js";

import {four as five} from "./js/module.js";

// import all named exports
import * as mod from "./js/module.js";

// initialize logger
Logger.init();

// attach logger to console
Logger.attach();

// capture unhandled exceptions
Logger.capture();

// declare functions
const multiply1 = (arg1, arg2) => arg1 * arg2;

const multiply2 = (arg1, arg2) => arg1 * arg2;

const multiply3 = (...args) => {
    let result;
    let i = 0;

    for (const num of args) {
        //console.log(num, result);

        if (i === 0) {
            result = num;
            ++i;
        } else
            result *= num;
    }

    return result;
};

document.on("ready", function() {
    // subscribe to logger messages
    Logger.plaintext(document.$("plaintext#logger"));

    // log sciter version
    console.debug(Utils.sciterInfo());

    // add support for F5 reload
    Utils.addReloadWindow();

    // close window on escape key press
    Utils.closeWindowOnEscape(Window.this);

    // center window on screen
    Utils.centerWindow(Window.this, "screen");

    // bring window to front and set input focus
    Window.this.activate(true);

    console.line();
    console.debug("arrow functions");

    console.log("multiply1(3, 3)", multiply1(3, 3));
    console.log("multiply2(6, 6)", multiply2(6, 6));

    console.line();
    console.debug("import/export");

    console.log("bmiDefault(78, 1.87)", bmiDefault(78, 1.87));
    console.log("bmi(78, 1.87)", bmi(78, 1.87));
    console.log("four", four);
    console.log("five", five);

    console.line();
    console.debug("classes");

    class Person {
        constructor(name) {
            this.name = name;
        }

        hello = () => {
            console.log(this.name);
        };
    }

    const person = new Person("8ctopus");

    person.hello();

    console.line();
    console.debug("spread and reset operator");

    const myArray = [1, 2, 3];

    const newArray = [...myArray, 4, 5, 6];

    console.log(newArray);

    // shallow clone object
    const myObject = {
        name: "8ctopus",
        color: "variable",
    };

    //
    const shallowClone = {
        ...myObject,
    };

    shallowClone.name = "test";

    console.log(myObject, shallowClone);

    console.log("multiply3(3, 4, 2, 5)", multiply3(3, 4, 2, 5));

    const log = (...args) => {
        for (const num of args)
            console.log(num);
    };

    console.log("log(1, 2, 3)");
    log(1, 2, 3);

    const array = [1, 2, 3, 4, 5];

    const [, , third, fourth] = array;

    console.log("third, fourth", third, fourth);

    console.line();
    console.debug("destructuring");

    const octopus = Object.freeze({
        name: "8ctopus",
        color: "variable",
        age: 5,
        vision: "good",
    });

    const {color, age} = octopus;

    console.log("color, age", color, age);
});

</script>
</head>
<body>
    <plaintext #logger readonly />
</body>
</html>
